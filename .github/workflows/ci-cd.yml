name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read VERSION file
      id: version
      run: |
        VERSION=$(cat VERSION | tr -d '\n\r')
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Using version: ${VERSION}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Check if image tag already exists
      id: check-tag
      run: |
        VERSION=${{ steps.version.outputs.version }}
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        TAG_EXISTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://ghcr.io/v2/${IMAGE_NAME_LOWER}/manifests/${VERSION} | jq -r '.errors[0].code')

        if [ "$TAG_EXISTS" != "NAME_UNKNOWN" ] && [ "$TAG_EXISTS" != "MANIFEST_UNKNOWN" ]; then
          echo "Image with tag '${VERSION}' already exists. Exiting workflow."
          exit 1
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-development:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    permissions:
      contents: write
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read VERSION file
      id: version
      run: |
        VERSION=$(cat VERSION | tr -d '\n\r')
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Using version: ${VERSION}"

    - name: Checkout deployment repository
      uses: actions/checkout@v4
      with:
        repository: ${{ secrets.DEPLOYMENT_REPO }}
        token: ${{ secrets.DEPLOYMENT_TOKEN }}
        path: deployment

    - name: Update Development Kustomize image
      run: |
        cd deployment/overlays/development
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        kustomize edit set image ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${{ steps.version.outputs.version }}

    - name: Configure Git
      run: |
        cd deployment
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit and push development changes
      run: |
        cd deployment
        git add overlays/development/
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update development image to version ${{ steps.version.outputs.version }}")
        git push origin main

  update-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read VERSION file
      id: version
      run: |
        VERSION=$(cat VERSION | tr -d '\n\r')
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Using version: ${VERSION}"

    - name: Checkout deployment repository
      uses: actions/checkout@v4
      with:
        repository: ${{ secrets.DEPLOYMENT_REPO }}
        token: ${{ secrets.DEPLOYMENT_TOKEN }}
        path: deployment

    - name: Update Production Kustomize image
      run: |
        cd deployment/overlays/production
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        kustomize edit set image ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${{ steps.version.outputs.version }}

    - name: Configure Git
      run: |
        cd deployment
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit and push production changes
      run: |
        cd deployment
        git add overlays/production/
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update production image to version ${{ steps.version.outputs.version }}")
        git push origin main
